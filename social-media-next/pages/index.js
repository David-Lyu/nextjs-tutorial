import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import {
  signIn,
  signOut,
  useSession,
  getProviders,
  getSession,
  getCsrfToken
} from 'next-auth/client';

// import { csrfToken } from 'next-auth';
import { useRef } from 'react';
import { AiFillGithub, AiOutlineMail } from 'react-icons/ai';

import styles from '../styles/Home.module.css';
import Form from '../components/modules/Form/form';

export default function Home(props) {
  const router = useRouter();
  const [session, loading] = useSession();
  const signUpEle = useRef(null);
  const signInEle = useRef(null);

  console.log(session);

  let id = session?.user.urlPath || session?.user.id;
  //can change callback from nextjs will work on this later
  if (session) router.push('/profile/' + id);

  //Form components
  const LOGIN_CONFIG = Object.freeze({
    url: '/api/custom-sign/login',
    method: 'POST'
  });
  const LOGIN_INPUTS = Object.freeze([
    { label: 'Email', type: 'email' },
    { label: 'Password', type: 'password' }
  ]);
  function loginFunc(data) {
    console.log(data);
  }

  const SIGNUP_CONFIG = Object.freeze({
    url: '/api/custom-sign/create-new-user',
    method: 'POST'
  });
  const SIGNUP_INPUTS = Object.freeze([
    { label: 'Email', type: 'email' },
    { label: 'First Name', type: 'text' },
    { label: 'Last Name', type: 'text' },
    { label: 'Phone Number', type: 'tel' },
    { label: 'Password', type: 'password' },
    { label: 'Confirm Password', type: 'password' }
  ]);
  function signupFunc(data) {}

  //RETURN
  return (
    <div>
      <Head>
        <title>Social Media App</title>
        <meta
          name="NextJS Social media app"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main + ' row'}>
        <h1>Welcome to Social Media</h1>
        <section className={styles['signup-section']}>
          <div className={styles.register} ref={signUpEle}>
            <h3> New? Please register</h3>
            <Form
              inputs={SIGNUP_INPUTS}
              formName={'signup'}
              config={SIGNUP_CONFIG}
              submitFunc={signupFunc}
            />
            {/* This is hidden till <600px */}
            <div className={styles['show-login-click']}>
              <p>To sign-in click on the link below</p>
              <button
                onClick={() => {
                  showSignUpOrIn(signInEle, signUpEle, 'signup');
                }}>
                Click here to login
              </button>
            </div>
          </div>

          <div className={styles.login} ref={signInEle}>
            <h3>Welcome back please login</h3>
            <Form
              inputs={LOGIN_INPUTS}
              formName="Login"
              csrfToken={props.csrfToken}
              onSubmit={(e) => {
                loginOnSubmit(e, signIn);
              }}></Form>
            <div>
              Or signin with these:
              <AiFillGithub
                onClick={() => signIn('github')}
                aria-label="GitHub"
              />
              <AiOutlineMail onClick={() => signIn()} aria-label="email" />
            </div>
            {/* This is hidden till <600px */}
            <div className={styles['show-register-click']}>
              <p>To sign-up click on the link below</p>
              <button
                onClick={() => {
                  showSignUpOrIn(signInEle, signUpEle, 'signin');
                }}>
                Click here to register
              </button>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

export async function getServerSideProps({ req, res }) {
  const csrfToken = await getCsrfToken({ req });
  return {
    props: {
      csrfToken: csrfToken
    }
  };
}

//helper functions
//need to get error handling
function loginOnSubmit(e, signIn) {
  e.preventDefault();
  const email = e.currentTarget.children[1].children[0].children[0].value;
  const password = e.currentTarget.children[2].children[0].children[0].value;
  signIn('credentials', { username: email, password, callback: '/' });
}

function showSignUpOrIn(signInElement, signUpElement, from) {
  if (from === 'signup') {
    //want to show sign in
    signInElement.current.classList.remove(styles.hide);
    signUpElement.current.classList.remove(styles.show);
    signInElement.current.classList.add(styles.show);
    signUpElement.current.classList.add(styles.hide);
  }

  if (from === 'signin') {
    //want to show sign up
    signInElement.current.classList.remove(styles.show);
    signUpElement.current.classList.remove(styles.hide);
    signInElement.current.classList.add(styles.hide);
    signUpElement.current.classList.add(styles.show);
  }
}
